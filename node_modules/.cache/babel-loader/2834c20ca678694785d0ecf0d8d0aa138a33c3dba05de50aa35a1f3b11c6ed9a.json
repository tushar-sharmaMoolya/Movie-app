{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Downloads/movie-streaming-app-v2-complete/movie-streaming-app/src/context/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/ThemeContext.tsx\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState(() => {\n    // Check localStorage first\n    const saved = localStorage.getItem('theme');\n    if (saved) return saved;\n\n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    return 'light';\n  });\n\n  // Apply theme to document\n  useEffect(() => {\n    const root = document.documentElement;\n    root.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n\n    // Also set CSS variables\n    if (theme === 'dark') {\n      root.style.colorScheme = 'dark';\n    } else {\n      root.style.colorScheme = 'light';\n    }\n  }, [theme]);\n  const toggleTheme = useCallback(() => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  }, []);\n  const value = {\n    theme,\n    toggleTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n_s(ThemeProvider, \"KcEV+HL1FWy0dZ0m8VL6WEGl7hY=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","saved","localStorage","getItem","window","matchMedia","matches","root","document","documentElement","setAttribute","setItem","style","colorScheme","toggleTheme","prev","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["/Users/apple/Downloads/movie-streaming-app-v2-complete/movie-streaming-app/src/context/ThemeContext.tsx"],"sourcesContent":["// src/context/ThemeContext.tsx\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Check localStorage first\n    const saved = localStorage.getItem('theme') as Theme | null;\n    if (saved) return saved;\n\n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  });\n\n  // Apply theme to document\n  useEffect(() => {\n    const root = document.documentElement;\n    root.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n\n    // Also set CSS variables\n    if (theme === 'dark') {\n      root.style.colorScheme = 'dark';\n    } else {\n      root.style.colorScheme = 'light';\n    }\n  }, [theme]);\n\n  const toggleTheme = useCallback(() => {\n    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));\n  }, []);\n\n  const value: ThemeContextType = {\n    theme,\n    toggleTheme,\n  };\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS3F,MAAMC,YAAY,gBAAGP,aAAa,CAA+BQ,SAAS,CAAC;AAE3E,OAAO,MAAMC,aAAsD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAQ,MAAM;IAC9C;IACA,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAiB;IAC3D,IAAIF,KAAK,EAAE,OAAOA,KAAK;;IAEvB;IACA,IAAIG,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAAE;MAClF,OAAO,MAAM;IACf;IAEA,OAAO,OAAO;EAChB,CAAC,CAAC;;EAEF;EACAhB,SAAS,CAAC,MAAM;IACd,MAAMiB,IAAI,GAAGC,QAAQ,CAACC,eAAe;IACrCF,IAAI,CAACG,YAAY,CAAC,YAAY,EAAEX,KAAK,CAAC;IACtCG,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEZ,KAAK,CAAC;;IAEpC;IACA,IAAIA,KAAK,KAAK,MAAM,EAAE;MACpBQ,IAAI,CAACK,KAAK,CAACC,WAAW,GAAG,MAAM;IACjC,CAAC,MAAM;MACLN,IAAI,CAACK,KAAK,CAACC,WAAW,GAAG,OAAO;IAClC;EACF,CAAC,EAAE,CAACd,KAAK,CAAC,CAAC;EAEX,MAAMe,WAAW,GAAGvB,WAAW,CAAC,MAAM;IACpCS,QAAQ,CAAEe,IAAI,IAAMA,IAAI,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EAC3D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAuB,GAAG;IAC9BjB,KAAK;IACLe;EACF,CAAC;EAED,oBAAOrB,OAAA,CAACC,YAAY,CAACuB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAnB,QAAA,EAAEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAwB,CAAC;AAChF,CAAC;AAACvB,EAAA,CAtCWF,aAAsD;AAAA0B,EAAA,GAAtD1B,aAAsD;AAwCnE,OAAO,MAAM2B,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGrC,UAAU,CAACM,YAAY,CAAC;EACxC,IAAI,CAAC+B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}